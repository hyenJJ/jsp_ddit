<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">

<!--  스키마 종류: beans, c, p, context, mvc  -->

<!-- Spring (M)VC 모듈을 구성하는 전략객체들을 등록하기 위한 설정 파일. -->
		<context:component-scan base-package="kr.or.ddit" use-default-filters="false">
				<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
				<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>	
		</context:component-scan>
		
    	<!-- HandlerMapping :  @Controller(핸들러), @RequestMapping(요청) 어노테이션을 트레이싱하고,
								요청 - 헨들러 쌍에 대한 정보 수집하고, Map 을 형성함.
			HandlerAdapter : POJO 방식으로 구현된 핸들러를 reflection 을 기반으로 호출하는 역할.
			ViewResolver : Logical View Name 을 기반으로 View Layer 를 검색하는 역할.
									
		  -->
		  
		<!--   <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"></bean>
		  <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"></bean>-->
		  
		  <!-- 따로 등록해줄 필요가 없다  -->
		  <!-- 한가지 전략객체를 여러 구현체로 등록하는 경우 반드시 order 설정 필요.
		  	   경우에 따라 order 가 가장 마지막이 되어야하는 전략객체도 있음.(other 생략)
		   -->
		  <mvc:annotation-driven validator="validator" ></mvc:annotation-driven>
		  
		  <!--  -->
		  <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" 
		  		p:validationMessageSource-ref="messageSource"
		  />
		  
		  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
		  	p:prefix="/WEB-INF/jsp/"
		  	p:suffix=".jsp"
		  	
		  
		  />
		  <!-- logicalviewName 과 등록된 definition name 이 동일하면  view 해결. -->
		  <bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer" 
		  	p:definitions="/WEB-INF/tiles/*-tiles.xml"
		  />
		  <bean class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" 
		  	p:order="1"
		  /> 
		  <!-- 정적 자원을 처리하기 위해  -->
		  <mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>
		  
		  <!-- basenames(복수형태) ->  여러개의 파일도 가져올수있다 
		  id = resourceBundleMessageSource -> MessageSource :  굳이 아이디를 바꾸는 이유는 누군가가 이아이디를 injection으로 사용한다는 것
		  -->
		  <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" 
		  	p:basenames="kr.or.ddit.msgs.message,kr.or.ddit.msgs.errorMessage"
		  />
		  
		  <!-- 쿠키는 언제까지 저장하는지 기간설정이 필요하다
		    p:cookieMaxAge 파라미터 타입은 integer임 -> 시간으로 하면 long type 이기때문에 millisecond로 설정
		  -->
		  <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
		  	p:cookieName="localeCookie"		  	
		  	p:cookieMaxAge="#{60*60*24*7}"
		  />
		  
		  <!-- interceptosr - 복수형태로 얼마든지 여러개 가능 -->
		  <mvc:interceptors>
		  		<mvc:interceptor>
		  			<mvc:mapping path="/**"/> <!-- 모든 controller를 거침  -->
		  			<mvc:exclude-mapping path="/resources/**"/>
		  			<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
		  				p:paramName="language"
		  			/>
		  		</mvc:interceptor>
		  </mvc:interceptors>
</beans>
